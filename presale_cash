#!/usr/bin/env python
# -*- coding: utf-8 -*-
__author__ = 'xiao'

from torndb import Connection
import datetime
import sys

reload(sys) 
sys.setdefaultencoding( "utf-8" ) 

mysql_host = "127.0.0.1"
db_name = "test"
dd = datetime.datetime

#查找预售提现
def get_presale_cash():
    try:

        starttime = dd.now()
        print "query rrs_order_alipay_cash for presale"
        # 查出预售提现单 排除退款提现
        cashs = db.query("select * from rrs_order_alipay_cash where type=2 and refund_fee !=0")
        print 'cashs length: ' + len(cashs)
        #long running
        endtime = dd.now()
        print "done, cast: ", (endtime - starttime).seconds
        return cashs

    except Exception as e:
        print "query presale cash data failed ", e
        pass

#查找已付定金取消或付尾款超时type为预售定金的子订单
def get_cancel_overtime_order_item():
    try:

        starttime = dd.now()
        print "query order_items for cancel or overtime"
        orderItems = db.query("select * from order_items where type=2 and status in(-6,-7)")
        print 'orderItems length: ' + len(orderItems)
        #long running
        endtime = dd.now()
        print "done, cast: ", (endtime - starttime).seconds
        return orderItems

    except Exception as e:
        print "query order_items orderItems data failed ", e
        pass

#查找已完成或退款或退货的类型为预售定金的子订单
def get_over_refund_refundgoods_order_item():
    try:

        starttime = dd.now()
        print "query order_items for over or refund or refund_goods"
        orderItems = db.query("select * from order_items where type=2 and status in(-3,-4,3)")
        print 'orderItems length: ' + len(orderItems)
        #long running
        endtime = dd.now()
        print "done, cast: ", (endtime - starttime).seconds
        return orderItems

    except Exception as e:
        print "query order_items orderItems data failed ", e
        pass

#处理只有需生成一条提现记录的预售提现（当为预售已付定金取消和付尾款超时时）只需更新子结算中的paymentcode paid_at 手续费
def handle_one_cash():
    orderItems = get_cancel_overtime_order_item()
    for orderItem in orderItems:
        #更新子结算
        update_item_settlement(orderItem)

#处理要拆分的提现
def handle_split_cash():
    orderItems = get_cancel_overtime_order_item()
    for orderItem in orderItems:
        chash = db.get("select * from rrs_order_alipay_cash where order_id = %s",orderItem.order_id)
        #更新子结算
        update_item_settlement(orderItem)
        #更新总提现 
        db.execute("update rrs_order_alipay_cash set alipay_fee = %s set total_fee =%s set cash_fee =%s",service_fee,orderItem.fee,orderItem.fee-service_fee)
        #更新尾款子结算
        orderItemRest = db.get("SELECT * FROM order_items where order_id = %s" and type =3, orderItem.order_id)
        #更新子结算
        update_item_settlement(orderItemRest)
        #生成尾款提现
        generate_order_cash（orderItemRest）
        
#更新子结算单
def update_item_settlement(orderItem):
    transes = db.query("select * from rrs_alipay_trans where trade_no = %s", orderItem.payment_code)
            if (len(transes) == 0):
                print "can not found alipay transes, skipped"
                return
            else:
                print "got trans from alipay!!"
                service_fee = 0
                trans_date =''
                for trans in transes:
                    if trans.trans_code_msg == '收费':
                        print "get fee of order(id:{0}) is {1}".format(settlement.order_id, trans.outcome)
                        service_fee = trans.outcome
                        trans_date = trans.trans_date
                #更新定金子结算单
                db.execute("update rrs_item_settlements set third_party_commission = %s paid_at= %s payment_code = %s where order_id = %s", service_fee,trans_date,orderItem.payment_code, orderItem.id)
                
def generate_order_cash(settlement):
    order = db.get("SELECT * FROM orders where id = %s", settlement.order_id)
    # order_items = db.query("SELECT * FROM order_items where order_id = %s", order_id)
    shop = db.get("SELECT * FROM shops where user_id = %s", order.seller_id)

    if (settlement.type == 1 and settlement.pay_type == 2):
        # print "plain cod order(id:{0}) ,skipped".format(settlement.order_id)
        return

    # 计算总金额
    total_fee = settlement.fee

    # print settlement.third_party_commission
    cash_fee = long(total_fee) - long(settlement.third_party_commission)



    if shop == None:
        print "can not find shop: ", order.shop_id
        return 


    cashed_at = None

    if (settlement.cashed == 1):
        cashed_at = settlement.paid_at


    ## 创建提现
    db.execute("INSERT INTO rrs_order_alipay_cash " + 
        "(" + 
            "order_id, type, buyer_id, buyer_name, seller_id, seller_name, shop_id, shop_name, " + 
            "total_fee, alipay_fee, cash_fee, refund_fee, status, " + 
            "traded_at, cashed_at, created_at, updated_at " 
        ")" + 
        "VALUES " + 
        "(" + 
            "%s, %s, %s, %s, %s, %s, %s, %s, " + 
            "%s, %s, %s, %s, %s, " + 
            "%s, %s, now(), now()"
        ")", 

            order.id, order.type, order.buyer_id, settlement.buyer_name, order.seller_id, settlement.seller_name, shop.id, shop.name,
            total_fee, settlement.third_party_commission, str(cash_fee), 0, settlement.cashed, 
            order.paid_at, cashed_at
    )



def start_of_day(date):
    # t = dd.strptime(date_str, '%Y-%m-%d %H:%M:%S')
    start = date.strftime('%Y-%m-%d') + ' 00:00:00'
    return start

def end_of_day(date):
    # t = dd.strptime(date_str, '%Y-%m-%d %H:%M:%S')
    end = date.strftime('%Y-%m-%d') + ' 23:59:59'
    return end

if __name__ == "__main__":

    db = Connection(mysql_host, db_name, user='root', password='anywhere')

    # 处理只有需生成一条提现记录的预售提现
    def handle_one_cash()
    # 处理要拆分的提现
    def handle_split_cash()

   
